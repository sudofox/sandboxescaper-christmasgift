#include <iostream>

int *decode_keypart(int part[], int second_key[], int length) {
  for (int x = 0; x < length; x++) {
    part[x] = part[x] ^ second_key[x];
  }
  return part;
}

int main() {

  char encrypted_bear[102] = {
      0x13, 0x4a, 0x77, 0x04, 0x30, 0x10, 0x0e, 0x27, 0x15, 0x16, 0x2d, 0x02,
      0x6c, 0x4a, 0x22, 0x0b, 0x30, 0x10, 0x72, 0x29, 0x18, 0x14, 0x2f, 0x00,
      0x1e, 0x3b, 0x07, 0x04, 0x30, 0x6c, 0x24, 0x5b, 0x15, 0x16, 0x2d, 0x02,
      0x1e, 0x35, 0x08, 0x04, 0x3d, 0x10, 0x0e, 0x27, 0x15, 0x19, 0x07, 0x02,
      0x4f, 0x35, 0x08, 0x04, 0x7f, 0x10, 0x0e, 0x27, 0x5a, 0x16, 0x2d, 0x02,
      0x4f, 0x1f, 0x08, 0x78, 0x30, 0x10, 0x00, 0x2a, 0x12, 0x11, 0x2a, 0x0f,
      0x1d, 0x35, 0x08, 0x0b, 0x1a, 0x10, 0x0e, 0x20, 0x18, 0x6a, 0x52, 0x7d,
      0x6a, 0x4a, 0x77, 0x0b, 0x3d, 0x17, 0x24, 0x27, 0x15, 0x16, 0x2d, 0x02,
      0x14, 0x38, 0x05, 0x09, 0x37, 0x30};

  int key1[3] = {0xB8, 0xFE, 0xE0};   // KEY1 Scrambled
  int key1a[3] = {0xF0, 0x9F, 0x90};  // KEY1 Emoji

  int key2[3] = {0xCB, 0x9B, 0xC8};   // KEY2 Scrambled: "pyH"
  int key2a[3] = {0xBB, 0xE2, 0x80};  // KEY2 Emoji

  int key3[3] = {0xE2, 0x8E, 0xF4};   // KEY3 Scrambled: "oli"
  int key3a[3] = {0x8D, 0xE2, 0x9D};  // KEY3 Emoji

  int key4[4] = {0xE0, 0x8E, 0xC1, 0xFC};   // KEY4 Scrambled: "days"
  int key4a[4] = {0x84, 0xEF, 0xB8, 0x8F};  // KEY4 Emoji

  int *keyA = decode_keypart(key1, key1a, 3);  // key1 ^ key1a
  int *keyB = decode_keypart(key2, key2a, 3);
  int *keyC = decode_keypart(key3, key3a, 3);
  int *keyD = decode_keypart(key4, key4a, 4);

  std::cerr << "Christmas Challenge for SandboxEscaper\n"
               "          from Austin/Sudofox         \n"
               "This binary has two secret keys used  \n"
               "to decrypt this ASCII art of the bear \n"
               "and display it. There's a bit of a    \n"
               "twist, however! See if you can solve  \n"
               "for both of them. Merry Christmas!    \n"
               "======================================\n";

  for (int x = 0; x < 102; x++) {
    encrypted_bear[x] = encrypted_bear[x] ^ keyD[x % 4] ^ keyC[x % 3] ^
                        keyB[x % 3] ^ keyA[x % 3];
    std::cout << encrypted_bear[x];
  }

  return 0;
}
